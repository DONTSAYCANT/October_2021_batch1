October 12:

Rules for creating veriables in python (4 to 5 rules)

October 13:

Task1:

Difference btwn Compiler and Interpreter

Task2:

Difference between python2 and python3

Task3:

#Area circle ==> pi *(r * r)
#perimater of circle ===> 2 * pi * r

r = 10
pi = 3.14

print output and type of output


Task4:

create a integer ==> try convert to float/bool/string
create a Float ==> try convert to Int/bool/string
create a bool ==> try convert to float/int/string
create a string ==> try convert to Int/bool/float


October 14:

Task1 :

simple interest p * n * r /100
get p value n value and r value from user
p ===< integer
n ===> float
r ===> float

Output format ===> string format


Task2 :

Area of cone: 1/3 * pi * r ^2 * h

get r from user (float)
get height from user (int)

print output in integer format


Task3:

even / odd
postivie / negative
prime number / composite number
factorial
fibonacci series
armstrong numbe
square/ cube or power
floor div/ ceil divison
palindrome
add /sub / mul/ div
factors or multiples of a number

3 ==> 1,3
25 ===> 1,5,25
30 ==> 1,2,3,5,6,15,30

Task4:

"computer_science"

identify foraward and reverse index value for below values
i
t
_
n
m

write code for this also


October 16: 

Task1:

create a string called "computer_science"

extract:

computer
science
puter
_sci
ter_sci

Task2:

extract:

cmue
sine
t_i
c_
cpe


October 19:

Tasks:

value1 = "Information_Technology"

print(value1[-5:5]) 
print(value1[5:-5])
print(value1[5:-5:1])
print(value1[-5:5:1])
print(value1[5:-5:-1])
print(value1[-5:5:-1])
print(value1[5:-5:5])
print(value1[-5:5:-5])
print(value1[5:-5:-5])
print(value1[-5:5:5])
print(value1[-3:3]) 
print(value1[3:-3])
print(value1[3:-3:1])
print(value1[-3:3:1])
print(value1[3:-3:-1])
print(value1[-3:3:-1])
print(value1[3:-3:3])
print(value1[-3:3:-3])
print(value1[3:-3:-3])
print(value1[-3:3:3])
print(var[::1])
print(var[::2])
print(var[::3])
print(var[::-1])
print(var[::-2])
print(var[::-3])
print(var[:8:2])
print(var[:8:-2])
print(var[8::2])
print(var[8::-2])
print(var[:-6:2])
print(var[:-6:-2])
print(var[-6::2])
print(var[-6::-2])



October 22:

Task1:

https://www.hackerrank.com/challenges/python-mutations/problem

#immutable strings

a = "pothon"
index = 4
b = "*"

print(a[index])

a[index] = b

October 23:

#task1
https://www.w3schools.com/python/exercise.asp?filename=exercise_lists1

#task2

Get a string or List 
identify middle element of the string or List

"python" ==> h
"cpp" ==> p
"system ==> t
[1,2,3,4,5] ==> 3

#Task3:

what's your name
mutation
swapcase
capitalize
Hello wrold
Arithmetic operators 
python divison

October 30:

Task1:

List

#Create an empty list (two ways)
#Concatenate with [5,6,7,8]
#add 8,9,1,5,6,7,8,1 elements to that list
#Find frequency of 8 (count)
#find the mean of the list
#find sum (List) + min + Max 
#Find median of the list
#remove duplicates from list and give output in the format of tuple

Task2: Tuple

#Create two tuples (1,4,5,6,7,8) (5,6,7,8,9)
#Find the common elements between two tuples
#Concatenate both tuples and remove duplicates from tuple
#Find the index value of 9 (after concatenation)
#multiply above elements 3 times

Task3: Sets

#Create two empty sets
#update set1 with 7,8,9,1,2,3,4,5,0
#update set2 with 4,5,6,0
#check whether set2 is subset of set1 or no ?
#check whether both have common elements are no ?
#remove 8 from set 1 and set 2 ==> find the inferences
#discard 0 from set1 and set2 
#find collection of both sets ===> set1 and set2

Task4:

 Dictionary:

#create a dictionary
#{1:["english","maths","science"], 2:[10,20,30], 3:["bio-botany","bio-zoology","Algebra"]}
#Extract "bobtn" from above dictionary
#Extract "arbeg" from above dictionary
#print all keys in dictionary and convert it into tuple
#Find the average of all numbers available under key "2"

Task5

Difference between list tuple set dictionary

October 31:


Task1:

Get one string from user:

python  ====> ptoyhn
java  ===> jvaa
groovy  ===> govroy


Task2:

"python_is_using_interpreter"

#[-2:0:-1]
#[5:-5:5]
#[-5:5:-5]
#[5:-5:-5]
#[3:9:-1]
#[9:-10:-2]
#[2:-4:-4]
#[-4:2:-2]
#[0:-1:-3]
#[-3:3:6]
#[::-3]
#[::-2]
#[2:-2:-2]
#[2:-2:2]
#[5:-5:5]
#[3:-3:3]
#[::2]
#[::-5]

#Task3:

string1:  master
string2:  python

Output:  mason  (Concatenation of first part of string1 + second part od string 2)


string1: encyclopedia
string2: social

output: encyclal


#Task4:

string1: animal
string2: hello

output:   nael

string1: india
string2: python

output: niyo

#Task5:

string1: wikipedia
string2: typescript

output: p  +  c   ===> ascii value of p + ascii value of c  ====>  198


Task6:

string1: python
String2: java

output ===> jythonpava64hv

Task7:

string1: ***python***
string1: **python********
string: ********java*******


output: python  (strip method )
https://www.w3schools.com/python/ref_string_strip.asp

Task8:

int1: 123
int2: 456

output: 123456579 


Task9:

String1: python  ==> h  ===> ascii value
Int1: 100  ==> D

string1 ==> middle character's ascii value
int ===> letter

105D


Task10: (name<space>float)

string1: "ravi 10.30"  
string2: "meghala 12.19"
string3: "Gokul 20.20"

split + indexing

10.30 + 12.19 + 20.20 ===> output ===> round (42.69000) 5 decimal places should be

https://www.w3schools.com/python/ref_string_strip.asp

November 6:

Task1:

get one number from user:

check whether the number is postive or negative

Task2:

get one number from user:

check whether the number is even or odd or zero

Task3:

Get one string from user
check whther the given string is palindrome or not

Task4:

Get age from user
check whether he is eligible for voting 18
Number years for eligiblilty 

Task5:

#90+ A   80+  B   70+ C  60 + D  50 + E  others Fail

#0 to 100 else: invalid mark
#Nested if 


List task:

[50,34,17,23,45,57,45,54,22]

The even elemets list is [50,34,54,22]
The odd elements list is [17,23,45,57,45]

===================
November 13 Tasks
===================

#program1
#Get one string from user
#extract middle letter of the string
#check whether middle letter is vowel or no

#program2
#Get one string from user
#Find the middle letter
#find ascii value for the middle letter
#check whether ascii value is odd or even

#program3:
#get one string from user
#check whether length of the string is odd or even

#program4:



#program5:
#Get one mark from student
#mark 0 to 100 otherwise invalid mark

#50 + PASS otherwise FAIL
#90 to 100 ===> A  ==> Even + Odd -
#80 to 89 ===> B
#70 to 79 ===> C
#60 to 69 ===> D
#50 to 59 ===> E

#0 to 49 ===> FAIL


#93 ===> A-
#99 ===> A-
#88 ====> B+

#78

#VALID MARK
#PASS MARK
#C+

#program6

#hackerrank Write a function
https://www.hackerrank.com/challenges/write-a-function/problem

#program7
#hackerrank Python If-Else
https://www.hackerrank.com/challenges/py-if-else/problem

#program8 

#two strings from user
#string 1: python  ==> first + middle + last 
#string 2: ptn (len == 3)

#valid otherwise invalid

#program9:

#two strings from user

#mathematics ===> 4 vowels
#science ==> 3 vowels

#both are equal count or not equal

#program10

#get one integer from user
#armstrong or no (without using loops)

#153 ===> 1^3 + 5^3 + 3^3
#370 ===> 3^3 + 7^3 + 0^3
#371 ====> 3^3 + 7^3 + 1^3


#program 11:
#[123, 124, 125,]  length of list odd or even


#program12:
#Fizz buzz
#Get one number from user
#5
#Multiple of 3 ==> Fizz
#Multiple of 5 ===> buzz
#Multiple of 3 and 5 ===> Fizzbuzz
#None ==> Invalid number

============================
Loops
============================







